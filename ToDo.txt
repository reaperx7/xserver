--- a/hw/xfree86/common/xf86Option.c
+++ b/hw/xfree86/common/xf86Option.c
@@ -50,6 +50,7 @@
 #include "xf86.h"
 #include "xf86Optrec.h"
 #include "xf86Option.h"
+#include "xf86Priv.h"

 static OptionInfoRec *AvailableOptions(int chipid, int bustype);

@@ -150,6 +151,10 @@ xf86CollectOptions(ScrnInfoPtr pScrn, XF86OptionPtr options)
         if (!strcasecmp(opt->name, "Accel"))
             pScrn->accel = xf86BoolOption(opt->value);
+        if (!strcasecmp(opt->name, "HDR10_Enable")) {
+            pScrn->hdr10Enable = xf86BoolOption(opt->value);
+            xf86Msg(X_CONFIG, "HDR10_Enable set to %s\n", pScrn->hdr10Enable ? "on" : "off");
+        }
     }
 }

@@ -200,6 +205,7 @@ xf86InitOptions(ScrnInfoPtr pScrn)
     pScrn->monitor = NULL;
     pScrn->accel = TRUE;
+    pScrn->hdr10Enable = FALSE;
 }

 --- a/hw/xfree86/common/xf86Edid.c
+++ b/hw/xfree86/common/xf86Edid.c
@@ -500,6 +500,30 @@ xf86ParseEDID(ScrnInfoPtr pScrn, unsigned char *edid)
     pScrn->monitor->widthmm = edid[21];
     pScrn->monitor->heightmm = edid[22];
+    /* Check for HDR10 support in EDID CTA-861 extension */
+    if (edid[0x80] == 0x02) { /* CTA-861 extension block */
+        int cta_len = edid[0x81];
+        int i;
+        for (i = 4; i < cta_len; i += (edid[i] & 0x1F) + 1) {
+            if ((edid[i] & 0xE0) == 0x40) { /* Video Data Block */
+                /* Check for HDR10 static metadata */
+                if (edid[i + 1] & 0x01) { /* Supports HDR10 */
+                    pScrn->hdr10Supported = TRUE;
+                    pScrn->maxBrightness = edid[i + 2] * 50; /* Max luminance in nits */
+                    pScrn->colorPrimaries = 0x01; /* BT.2020 */
+                    pScrn->eotf = 0x02; /* ST 2084 */
+                    xf86Msg(X_INFO, "Monitor supports HDR10: Max %d nits, BT.2020, ST 2084\n",
+                            pScrn->maxBrightness);
+                }
+            }
+        }
+    } else {
+        pScrn->hdr10Supported = FALSE;
+        pScrn->maxBrightness = 0;
+        pScrn->colorPrimaries = 0;
+        pScrn->eotf = 0;
+    }
 }
-------------------------------------
 --- a/hw/xfree86/common/xf86Crtc.c
+++ b/hw/xfree86/common/xf86Crtc.c
@@ -1000,6 +1000,24 @@ xf86CrtcConfigInit(ScrnInfoPtr scrn)
         config->crtc[i]->enabled = FALSE;
     }
+    /* Configure HDR10 if enabled and supported */
+    if (scrn->hdr10Enable && scrn->hdr10Supported) {
+        scrn->bitsPerPixel = 30; /* 10-bit per channel */
+        scrn->depth = 30;
+        /* Set up HDR metadata for driver */
+        scrn->hdrMetadata = malloc(sizeof(HDRMetadata));
+        HDRMetadata *meta = (HDRMetadata *)scrn->hdrMetadata;
+        meta->maxLuminance = scrn->maxBrightness;
+        meta->colorPrimaries = scrn->colorPrimaries;
+        meta->eotf = scrn->eotf;
+        xf86Msg(X_INFO, "Configuring HDR10: %d nits, color primaries %d, EOTF %d\n",
+                meta->maxLuminance, meta->colorPrimaries, meta->eotf);
+        /* Notify driver to enable HDR10 pipeline */
+        if (scrn->driverFunc) {
+            scrn->driverFunc(scrn, XF86_ENABLE_HDR10, scrn->hdrMetadata);
+        }
+    }
 }
-------------------------------
create new file hw/xfree86/common/xf86HDR.h




 #ifndef _XF86HDR_H_
#define _XF86HDR_H_

typedef struct {
    int maxLuminance; /* In nits */
    int colorPrimaries; /* 0x01 = BT.2020 */
    int eotf; /* 0x02 = ST 2084 */
} HDRMetadata;

#define XF86_ENABLE_HDR10 1001 /* Custom driver function code */

#endif

---------------------------------

--- a/hw/xfree86/drivers/modesetting/modesetting.c
+++ b/hw/xfree86/drivers/modesetting/modesetting.c
@@ -500,6 +500,18 @@ modesettingDriverFunc(ScrnInfoPtr scrn, XF86DriverFuncOp op, void *data)
         return TRUE;
     }
+    case XF86_ENABLE_HDR10:
+        if (scrn->hdr10Supported) {
+            HDRMetadata *meta = (HDRMetadata *)data;
+            /* Example: Pass metadata to DRM/KMS */
+            drmModePropertySet(scrn->fd, scrn->crtc_id, "HDR_METADATA",
+                               meta->maxLuminance, meta->colorPrimaries, meta->eotf);
+            xf86Msg(X_INFO, "Driver: Enabled HDR10 with max %d nits\n",
+                    meta->maxLuminance);
+            return TRUE;
+        }
+        return FALSE;
 }

 -------------------------------------

 --- a/glx/glxext.c
+++ b/glx/glxext.c
@@ -300,6 +300,12 @@ glxInitExtensions(ScreenPtr pScreen, ScrnInfoPtr pScrn)
         LogMessage(X_INFO, "GLX: Initialized GLX_MESA_swap_control\n");
     }
+    if (pScrn->hdr10Enable && pScrn->hdr10Supported) {
+        __glXEnableExtension(pScreen, "GLX_EXT_hdr_metadata");
+        LogMessage(X_INFO, "GLX: Initialized GLX_EXT_hdr_metadata for HDR10\n");
+        /* Register HDR metadata callback for applications */
+        glXSetHDRMetadata(pScrn->hdrMetadata);
+    }
 }

-----------------------------------------

Section "Screen"
    Identifier "Screen0"
    Device "Device0"
    Monitor "Monitor0"
    DefaultDepth 30
    Option "HDR10_Enable" "on"
    SubSection "Display"
        Depth 30
    EndSubSection
EndSection

-----------------------------------------

--- a/src/amdgpu_drv.c
+++ b/src/amdgpu_drv.c
@@ -50,6 +50,7 @@
 #include "amdgpu.h"
 #include "amdgpu_version.h"
 #include "xf86.h"
+#include "xf86HDR.h"

 #define AMDGPU_NAME "AMDGPU"
 #define AMDGPU_DRIVER_NAME "amdgpu"
@@ -100,6 +101,7 @@ typedef struct {
     Bool TearFree;
     Bool accel;
+	Bool hdr10Enable;
 } AMDGPUOptions;

 static const OptionInfoRec AMDGPUOptions[] = {
@@ -110,6 +112,7 @@ static const OptionInfoRec AMDGPUOptions[] = {
     { OPTION_TEARFREE, "TearFree", OPTV_BOOLEAN, {0}, FALSE },
     { OPTION_ACCEL, "Accel", OPTV_BOOLEAN, {0}, FALSE },
+	{ OPTION_HDR10_ENABLE, "HDR10_Enable", OPTV_BOOLEAN, {0}, FALSE },
     { -1, NULL, OPTV_NONE, {0}, FALSE }
 };

@@ -300,6 +302,9 @@ static Bool AMDGPUPreInit(ScrnInfoPtr pScrn, int flags)
     pAMDGPU->TearFree = xf86ReturnOptValBool(pAMDGPU->Options, OPTION_TEARFREE, FALSE);
     pAMDGPU->accel = xf86ReturnOptValBool(pAMDGPU->Options, OPTION_ACCEL, TRUE);
+	pAMDGPU->hdr10Enable = xf86ReturnOptValBool(pAMDGPU->Options, OPTION_HDR10_ENABLE, FALSE);
+	if (pAMDGPU->hdr10Enable)
+		xf86Msg(X_CONFIG, "AMDGPU: HDR10_Enable set to %s\n", pAMDGPU->hdr10Enable ? "on" : "off");
     return TRUE;
 }

-----------------------------------

--- a/src/amdgpu.h
+++ b/src/amdgpu.h
@@ -50,6 +50,12 @@ typedef struct {
     Bool TearFree;
     Bool accel;
+	Bool hdr10Enable;
+	Bool hdr10Supported; /* Set based on EDID */
+	int maxBrightness;   /* Max brightness in nits */
+	int colorPrimaries;  /* BT.2020 or other */
+	int eotf;            /* ST 2084 or other */
+	void *hdrMetadata;   /* Pointer to HDR metadata for DRM */
 } AMDGPUOptions;

 typedef struct {
@@ -200,6 +206,7 @@ typedef struct {
 #define OPTION_TEARFREE 1
 #define OPTION_ACCEL 2
+#define OPTION_HDR10_ENABLE 3
 #endif

----------------------------------

--- a/src/drmmode_display.c
+++ b/src/drmmode_display.c
@@ -50,6 +50,7 @@
 #include "amdgpu.h"
 #include "drmmode_display.h"
 #include <drm_fourcc.h>
+#include "xf86HDR.h"

 static Bool drmmode_parse_edid(ScrnInfoPtr pScrn, drmModeConnector *connector)
 {
@@ -100,6 +101,30 @@ static Bool drmmode_parse_edid(ScrnInfoPtr pScrn, drmModeConnector *connector)
         pScrn->monitor->heightmm = edid[22];
     }
+	/* Check for HDR10 support in CTA-861 extension */
+	AMDGPUInfoPtr info = AMDGPU_INFO(pScrn);
+	if (edid[0x80] == 0x02) { /* CTA-861 extension block */
+		int cta_len = edid[0x81];
+		int i;
+		for (i = 4; i < cta_len; i += (edid[i] & 0x1F) + 1) {
+			if ((edid[i] & 0xE0) == 0x40) { /* Video Data Block */
+				if (edid[i + 1] & 0x01) { /* Supports HDR10 */
+					info->hdr10Supported = TRUE;
+					info->maxBrightness = edid[i + 2] * 50; /* Max luminance in nits */
+					info->colorPrimaries = 0x01; /* BT.2020 */
+					info->eotf = 0x02; /* ST 2084 */
+					xf86Msg(X_INFO, "AMDGPU: Monitor supports HDR10: Max %d nits, BT.2020, ST 2084\n",
+					        info->maxBrightness);
+				}
+			}
+		}
+	} else {
+		info->hdr10Supported = FALSE;
+		info->maxBrightness = 0;
+		info->colorPrimaries = 0;
+		info->eotf = 0;
+	}
     return TRUE;
 }

----------------------------------------

--- a/src/drmmode_display.c
+++ b/src/drmmode_display.c
@@ -500,6 +500,29 @@ drmmode_set_mode_major(xf86CrtcPtr crtc, DisplayModePtr mode,
     drmmode_crtc_private_ptr drmmode_crtc = crtc->driver_private;
     AMDGPUInfoPtr info = AMDGPU_INFO(pScrn);
+	if (info->hdr10Enable && info->hdr10Supported) {
+		pScrn->bitsPerPixel = 30; /* 10-bit per channel */
+		pScrn->depth = 30;
+		/* Set up HDR metadata for DRM */
+		info->hdrMetadata = xnfalloc(sizeof(HDRMetadata));
+		HDRMetadata *meta = (HDRMetadata *)info->hdrMetadata;
+		meta->maxLuminance = info->maxBrightness;
+		meta->colorPrimaries = info->colorPrimaries;
+		meta->eotf = info->eotf;
+		xf86Msg(X_INFO, "AMDGPU: Configuring HDR10: %d nits, color primaries %d, EOTF %d\n",
+		        meta->maxLuminance, meta->colorPrimaries, meta->eotf);
+		/* Set DRM HDR properties */
+		drmModeObjectSetProperty(info->drm_fd, drmmode_crtc->crtc_id,
+		                         DRM_MODE_OBJECT_CRTC, "HDR_OUTPUT_METADATA",
+		                         (uint64_t)meta);
+		/* Enable 10-bit format */
+		drmModeObjectSetProperty(info->drm_fd, drmmode_crtc->crtc_id,
+		                         DRM_MODE_OBJECT_CRTC, "COLOR_FORMAT",
+		                         DRM_FORMAT_XRGB2101010);
+	} else {
+		pScrn->bitsPerPixel = 24;
+		pScrn->depth = 24;
+	}
     return TRUE;
 }

-----------------------------------------

new file for amdgpu include/xf86HDR.h

#ifndef _XF86HDR_H_
#define _XF86HDR_H_

typedef struct {
    int maxLuminance; /* In nits */
    int colorPrimaries; /* 0x01 = BT.2020 */
    int eotf; /* 0x02 = ST 2084 */
} HDRMetadata;

#define XF86_ENABLE_HDR10 1001

#endif

-----------------------------------------

--- a/hw/xfree86/common/xf86Crtc.c
+++ b/hw/xfree86/common/xf86Crtc.c
@@ -50,6 +50,7 @@
 #include "xf86.h"
 #include "xf86Crtc.h"
 #include "xf86Priv.h"
+#include "xf86HDR.h"

 @@ -1000,6 +1001,14 @@ xf86CrtcConfigInit(ScrnInfoPtr scrn)
     config->crtc[i]->enabled = FALSE;
     }
+    if (scrn->hdr10Enable && scrn->hdr10Supported) {
+        if (scrn->driverFunc) {
+            scrn->driverFunc(scrn, XF86_ENABLE_HDR10, scrn->hdrMetadata);
+            xf86Msg(X_INFO, "Xlibre: Notified driver for HDR10 enablement\n");
+        } else {
+            xf86Msg(X_WARNING, "Xlibre: No driverFunc for HDR10 support\n");
+        }
+    }
 }

------------------------------------

--- a/src/amdgpu_drv.c
+++ b/src/amdgpu_drv.c
@@ -600,6 +600,18 @@ AMDGPUDriverFunc(ScrnInfoPtr pScrn, xorgDriverFuncOp op, void *data)
         return TRUE;
     }
+	case XF86_ENABLE_HDR10:
+		if (AMDGPU_INFO(pScrn)->hdr10Supported) {
+			HDRMetadata *meta = (HDRMetadata *)data;
+			drmModeObjectSetProperty(AMDGPU_INFO(pScrn)->drm_fd,
+			                        AMDGPU_INFO(pScrn)->crtc_id,
+			                        DRM_MODE_OBJECT_CRTC, "HDR_OUTPUT_METADATA",
+			                        (uint64_t)meta);
+			xf86Msg(X_INFO, "AMDGPU: Enabled HDR10 with max %d nits\n", meta->maxLuminance);
+			return TRUE;
+		}
+		return FALSE;
+	default:
         return FALSE;
     }
 }

-----------------------------------------

--- a/src/amdgpu_glamor.c
+++ b/src/amdgpu_glamor.c
@@ -50,6 +50,7 @@
 #include "amdgpu.h"
 #include "amdgpu_glamor.h"
 #include <glamor.h>
+#include "xf86HDR.h"

 Bool amdgpu_glamor_init(ScreenPtr screen)
 {
@@ -100,6 +101,12 @@ Bool amdgpu_glamor_init(ScreenPtr screen)
         xf86Msg(X_INFO, "AMDGPU: Initialized GLX_MESA_swap_control\n");
     }
+	if (AMDGPU_INFO(pScrn)->hdr10Enable && AMDGPU_INFO(pScrn)->hdr10Supported) {
+		__glXEnableExtension(screen, "GLX_EXT_hdr_metadata");
+		xf86Msg(X_INFO, "AMDGPU: Initialized GLX_EXT_hdr_metadata for HDR10\n");
+		glXSetHDRMetadata(AMDGPU_INFO(pScrn)->hdrMetadata);
+	}
     return TRUE;
 }

--------------------------------------------

Section "Device"
    Identifier "AMDGPU"
    Driver "amdgpu"
    Option "HDR10_Enable" "on"
EndSection

Section "Screen"
    Identifier "Screen0"
    Device "AMDGPU"
    Monitor "Monitor0"
    DefaultDepth 30
    SubSection "Display"
        Depth 30
    EndSubSection
EndSection

